import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import roc_curve, auc, mean_absolute_error, mean_squared_error

# Load dataset
file_path = "/content/Sidi-Bel Abbes Region dataset.csv"
df = pd.read_csv(file_path)

# Clean column names
df.columns = df.columns.str.strip()

# Convert 'DC' and 'FWI' to numeric
df["DC"] = pd.to_numeric(df["DC"], errors="coerce")
df["FWI"] = pd.to_numeric(df["FWI"], errors="coerce")

# Drop rows with missing values
df = df.dropna()

# Encode target variable
df["Classes"] = df["Classes"].str.strip().map({"fire": 1, "not fire": 0})

# Feature selection
X = df.drop(columns=["Classes"])
y = df["Classes"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train models
dt_model = DecisionTreeClassifier()
log_model = LogisticRegression()
svm_model = SVC(probability=True)  # Enable probability estimates for SVM

dt_model.fit(X_train, y_train)
log_model.fit(X_train, y_train)
svm_model.fit(X_train, y_train)

# Predictions
dt_probs = dt_model.predict_proba(X_test)[:, 1]
log_probs = log_model.predict_proba(X_test)[:, 1]
svm_probs = svm_model.predict_proba(X_test)[:, 1]

# Compute ROC curves
fpr_dt, tpr_dt, _ = roc_curve(y_test, dt_probs)
fpr_log, tpr_log, _ = roc_curve(y_test, log_probs)
fpr_svm, tpr_svm, _ = roc_curve(y_test, svm_probs)

roc_auc_dt = auc(fpr_dt, tpr_dt)
roc_auc_log = auc(fpr_log, tpr_log)
roc_auc_svm = auc(fpr_svm, tpr_svm)

# Plot ROC curve
plt.figure(figsize=(8,6))
plt.plot(fpr_dt, tpr_dt, label=f"Decision Tree (AUC = {roc_auc_dt:.2f})")
plt.plot(fpr_log, tpr_log, label=f"Logistic Regression (AUC = {roc_auc_log:.2f})")
plt.plot(fpr_svm, tpr_svm, label=f"SVM (AUC = {roc_auc_svm:.2f})")
plt.plot([0, 1], [0, 1], linestyle='--', color='gray')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.show()

# Compute error metrics
y_pred_dt = dt_model.predict(X_test)
y_pred_log = log_model.predict(X_test)
y_pred_svm = svm_model.predict(X_test)
